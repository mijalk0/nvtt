var searchIndex = JSON.parse('{\
"nvtt_rs":{"doc":"nvtt","t":[13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,3,4,13,13,3,4,3,13,4,4,3,13,13,13,13,13,13,13,13,13,4,13,3,13,4,13,13,13,13,13,4,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,4,13,13,3,13,4,13,13,13,13,13,4,13,13,13,13,13,13,13,4,13,13,13,13,13,13,4,13,13,4,13,13,3,4,4,4,13,13,13,4,13,13,13,13,13,13,13,13,4,13,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["A","A","AlphaMode","AstcLdr10x10","AstcLdr10x5","AstcLdr10x6","AstcLdr10x8","AstcLdr12x10","AstcLdr12x12","AstcLdr4x4","AstcLdr5x4","AstcLdr5x5","AstcLdr6x5","AstcLdr6x6","AstcLdr8x5","AstcLdr8x6","AstcLdr8x8","Ati2","B","B","Bc1","Bc1a","Bc2","Bc3","Bc3Rgbm","Bc3n","Bc4","Bc4S","Bc5","Bc5S","Bc6S","Bc6U","Bc7","Bgra8Sb","Bgra8Sb","Bgra8Ub","Bgra8Ub","BoundingBox","Box","Box","CUDA_SUPPORTED","Channel","Clamp","Column","CompressionOptions","Container","Context","Cube","CubeFace","CubeLayout","CubeSurface","D2","D3","Dds","Dds10","Dxt1","Dxt1a","Dxt3","Dxt5","Dxt5n","EdgeFixup","Fastest","Filter","Float","Format","G","G","Halo","Highest","HorizontalCross","InputFormat","InvalidDimensions","Kaiser","Kaiser","Linear","Mipmap","Mirror","Mitchell","NegOne","NegX","NegY","NegZ","None","None","None","Normal","NormalTransform","One","Orthographic","OutputOptions","Paraboloid","PixelType","PosX","PosY","PosZ","Premultiplied","Production","Quality","Quartic","R","R","R32f","R32f","Reinhard","Repeat","Resize","Rgb","Rgba","Rgba16f","Rgba16f","Rgba32f","Rgba32f","RoundMode","Row","SharedExp","SplitInputFormat","Stereographic","Stretch","Surface","SurfaceError","Swizzle","TextureType","ToNearestPowerOfTwo","ToNextPowerOfTwo","ToPreviousPowerOfTwo","ToneMapper","Transparency","Triangle","Triangle","UnknownError","UnsignedFloat","UnsignedNorm","VerticalCross","Warp","WrapMode","Zero","abs","add_channel","algorithm","alpha_mode","alpha_test_coverage","average","average","binarize","blend","block_scale_cocg","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","box_resize","build_next_mipmap","build_next_mipmap_color","can_make_next_mipmap","canvas_resize","channel","channel_from_gamma","channel_mut","channel_to_gamma","clamp","clamp","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compress","compress_cube","compress_data","convolve","convolve_slice","copy","copy_channel","cosine_power_filter","count_mipmaps","count_mipmaps","count_mipmaps_until","create_sub_image","d3d9_format","data","data","data_mut","default","default","default","demultiply_alpha","depth","deref","dim","dim","dim_supported","drop","drop","drop","drop","drop","edge_length","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","estimate_size","estimate_size_cube","estimate_size_data","face","fast_resample","fill","filter_width_default","flip_x","flip_y","flip_z","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_gamma","from_gamma","from_log_scale","from_luvw","from_rgbe","from_rgbm","from_srgb","from_ycocg","gpu_data_ptr","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","height","histogram","image","image_split","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_cuda_acceleration_enabled","is_normal_map","kaiser_default","kaiser_resize","max_x","max_y","max_z","min_x","min_y","min_z","mipmap_box","mipmap_kaiser","mipmap_triangle","mitchell_resize","new","new","new","on_cpu","on_gpu","output_header","output_header_cube","output_header_data","pack_normals","premultiply_alpha","provide","quantize","range","range","reconstruct_normals","reset","resize_filtered","resize_make_square","resize_rounded","scale_alpha_to_coverage","scale_bias","set_alpha_mode","set_atlas_border","set_border","set_color_weights","set_container","set_cuda_acceleration","set_format","set_normal_map","set_output_header","set_pitch_alignment","set_pixel_format","set_pixel_type","set_quality","set_quantization","set_srgb_flag","set_user_version","set_wrap_mode","swizzle","tex_type","texel","texel_mut","to_clean_normal_map","to_cpu","to_gamma","to_gamma","to_gpu","to_grey_scale","to_lm","to_log_scale","to_luvw","to_normal_map","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_rgbe","to_rgbm","to_srgb","to_string","to_xenon_srgb","to_ycocg","tonemap","transform","transform_normals","triangle_resize","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unfold","unpack_normals","version","width","width","width","width","wrap_mode","data","unsigned_to_signed","alpha","freq","alpha","b","c","freq","a","a","a","a","b","b","b","b","g","g","g","g","r","r","r","r","expected","found"],"q":["nvtt_rsnvtt_rs::InputFormat","","nvtt_rs::Mipmap","","nvtt_rs::Resize","","","","nvtt_rs::SplitInputFormat","","","","","","","","","","","","","","","","nvtt_rs::SurfaceError",""],"d":["Alpha channel, referred to as channel 3 in the C/C++ API","Set to the current alpha channel.","Alpha mode. For use with <code>Surface::set_alpha_mode()</code>","ASTC - LDR - format, tile size 10x10.","ASTC - LDR - format, tile size 10x5.","ASTC - LDR - format, tile size 10x6.","ASTC - LDR - format, tile size 10x8.","ASTC - LDR - format, tile size 12x10.","ASTC - LDR - format, tile size 12x12.","ASTC - LDR - format, tile size 4x4.","ASTC - LDR - format, tile size 5x4.","ASTC - LDR - format, tile size 5x5.","ASTC - LDR - format, tile size 6x5.","ASTC - LDR - format, tile size 6x6.","ASTC - LDR - format, tile size 8x5.","ASTC - LDR - format, tile size 8x6.","ASTC - LDR - format, tile size 8x8.","DX10 - ATI2 format, similar to BC5U, channel order GR …","Blue channel, referred to as channel 2 in the C/C++ API","Set to the current blue channel.","DX10 - BC1 (DXT1) format. Same as <code>Format::Dxt1</code>.","DX10 - BC1 (DXT1) format. Same as <code>Format::Dxt1a</code>.","DX10 - BC2 (DXT3) format. Same as <code>Format::Dxt3</code>.","DX10 - BC3 (DXT5) format. Same as <code>Format::Dxt5</code>.","DX10 - BC3(DXT5) - using a magnitude encoding to …","DX10 - BC3 (DXT5) normal format. Stores a normal <code>(x, y, z)</code> …","DX10 - BC4U (ATI1) format (one channel, unsigned).","DX10 - BC4S format (one channel, signed).","DX10 - BC5U format (two channels, unsigned).","DX10 - BC5S format (two channels, signed).","DX10 - BC6 format (three-channel HDR, signed).","DX10 - BC6 format (three-channel HDR, unsigned).","DX10 - BC7 format (four channels, UNORM).","Blue, green, red, and alpha channels. Each component is an …","Split blue, green, red, and alpha channels. Each component …","Blue, green, red, and alpha channels. Each component is a …","Split blue, green, red, and alpha channels. Each component …","Bounding box of a <code>Surface</code>. For use with …","Box filter is quite good and very fast. It has some …","See <code>Mipmap::Box</code>.","Whether CUDA acceleration is supported by this device.","Represents an RGBA channel. For various operations with …","Coordinates are clamped, moving them to the closest …","A column layout, laid out as follows:","Describes the desired compression format and other …","Container type for encoded data.","Compression context.","Cubemap Texture.","Face of a cubemap. For use with <code>CubeSurface::face()</code>","Specifies how to fold or unfold a cube map from or to a 2D …","One level of a cube map texture.","2D Texture.","3D Texture.","DDS without the DX10 header extension. Compatible with …","DDS without the DX10 header. Supports BC6 and BC7, but may …","DX9 - DXT1 format.","DX9 - DXT1 with binary alpha.","DX9 - DXT3 format.","DX9 - DXT5 format.","DX9 - DXT5 normal format. Stores a normal <code>(x, y, z)</code> as …","Affects how certain cube surface processing algorithms …","","A generic filter. Can be either a mipmap filter or a …","Used to indicate a <code>DXGI_..._FLOAT</code> format.","Supported block-compression formats, including compressor …","Green channel, referred to as channel 1 in the C/C++ API","Set to the current green channel.","Applies an exponential tone mapper to each channel: …","","A <code>4*edgeLength (width) x 3*edgeLength</code> texture, laid out as …","Input formats. For use with <code>Surface::image()</code>.","","Kaiser-windowed Sinc filter is the best downsampling …","See <code>Mipmap::Kaiser</code>.","Colors inside <code>[0,1)^3</code> are preserved; colors outside are …","A mipmap filter. For use with <code>Surface::build_next_mipmap()</code>.","Coordinates are treated as if they reflect every time they …","Mitchell &amp; Netravali’s two parameter cubic filter.","Set entire channel to <code>-1.0</code>.","Negative X face, index 1.","Negative Y face, index 3.","Negative Z face, index 5.","No effect.","This image has no alpha. The alpha channel will be ignored …","Each extent is left as-is.","","Specifies a normal transformation. For use with …","Set entire channel to <code>1.0</code>.","Reconstructs the <code>z</code> component using <code>z = sqrt(1 - x^2 + y^2)</code>.","Holds container type and options specific to the container.","Reconstructed using <code>normalize(x, y, 1 - min(x^2 + y^2, 1))</code>.","Pixel value types.","Positive X face, index 0.","Positive Y face, index 2.","Positive Z face, index 4.","Colors are stored using premultiplied alpha: …","","Quality modes.","Reconstructed using <code>normalize(x, y, (1-x^2)(1-y^2))</code>.","Red channel, referred to as channel 0 in the C/C++ API","Set to the current red channel.","Red channel. Each value is an <code>f32</code> in native endianness.","Single red channel. Each value is an <code>f32</code> in native …","Applies a Reinhard operator to each channel: …","The image is treated as if it repeats on both axes, mod …","A resize filter. For use with <code>Surface::resize_filtered()</code> …","Linear RGB format.","Linear RGBA format. Same as <code>Format::Rgb</code>.","Red, green, blue, and alpha channels. Each component is an …","Split red, green, blue, and alpha channels. Each component …","Red, green, blue, and alpha channels. Each component is an …","Split red, green, blue, and alpha channels. Each component …","Extents rounding mode. For use with …","A row layout, laid out as follows:","Shared exponent. Only supported for …","Split input formats. For use with <code>Surface::image_split()</code>.","Stereographic projection (like looking from the bottom of …","Slightly stretches and shifts the coordinate systems …","One level of a 2D or 3D texture with red, green, blue, and …","The error type for various <code>Surface</code> operations.","Swizzle order. For use with <code>Surface::swizzle()</code>.","Texture types. Specifies the dimensionality of a texture.","Each extent is rounded either up or down to the nearest …","Each extent is rounded up to the next power of two.","Each element is rounded down to the next power of two.","Tone mapping functions. For use with <code>Surface::tonemap()</code>","Alpha represents opacity; for instance, <code>(r, g, b, 0.5)</code> is …","Triangle filter blurs the results too much, but that might …","See <code>Mipmap::Triangle</code>.","","Used to indicate a <code>DXGI_..._UF16</code> format. Unused.","Used to indicate a <code>DXGI_..._UNORM</code> format","A <code>3*edgeLength (width) x 4*edgeLength</code> texture, laid out as …","Applies a cubic warp to each face’s coordinate system in …","Specifies how to handle coordinates outside the typical …","Set entire channel to <code>0.0</code>.","Replaces all colors by their absolute value.","Add <code>src_channel</code> from <code>other</code> multiplied by <code>scale</code> to …","Filtering algorithm.","Returns the <code>AlphaMode</code> of this surface. This is for output …","Returns the approximate fraction (0 to 1) of the image …","Computes an average value for the given channel over the …","Computes the average of a channel, possibly with alpha or …","Sets values in the given channel to either 1 or 0 …","Interpolates all texels between their current color and a …","Stores per-block YCoCg scaling information for potentially …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the <code>BoundingBox</code> of this surface. <code>min_x/min_y/min_z</code> …","Returns the default <code>Resize::Box</code> filter, with <code>width = 0.5</code>.","Resizes this surface to create the next mip in a mipmap …","Replaces this surface with a surface the size of the next …","Returns whether the surface would have a next mip in a mip …","Crops or expands this surface from the <code>(0, 0, 0)</code> corner, …","Returns a slice of image data for <code>channel</code> in <code>[z, y, x]</code> …","Raises the given channel to the power <code>gamma</code>.","Returns a mutable slice of image data for <code>channel</code> in …","Raises the given channel to the power <code>1/gamma</code>.","Clamps values in the given channel to the range <code>[low, high]</code>…","Clamps all values in the channel to the range <code>[low, high]</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compress the <code>Surface</code> and write the compressed data to a …","Compress the <code>CubeSurface</code> and write the compressed data to …","Compress and write data to a <code>Vec&lt;u8&gt;</code>. Returns <code>Some(Vec&lt;u8&gt;)</code>…","Similar to <code>Surface::convolve_slice()</code>, this convolves a …","Convolves a channel with a kernel.","Copies the bounding box <code>src</code> of <code>other</code> to the bounding box …","Copy <code>src_channel</code> from <code>other</code> to <code>dst_channel</code> of this …","Spherically convolves this <code>CubeSurface</code> with a …","Returns the number of mips that would be in a full mipmap …","Returns the number of mipmaps in a full mipmap chain. Each …","Returns the number of mipmaps in a mipmap chain, stopping …","Creates a sub image from the subset <code>bounds</code> of this surface.","Translate to and from D3D formats.","Returns image data as a slice in <code>[c, z, y, x]</code> order. That …","","Returns image data as a mutable slice in <code>[c, z, y, x]</code> …","","","","Converts from premultiplied to unpremultiplied alpha, with …","Returns the depth (Z size) of the surface in pixels.","","Dimensionality of the uncompressed color format.","Dimensionality of the uncompressed color format.","Returns true if the dimensions are supported by this …","","","","","","Returns the edge length of any of the faces.","","","","","","","","","","","","","","","","","","Returns the total compressed size of mips …","Returns the total compressed size of mips …","Returns the total compressed size of mips …","Returns a reference for the given face.","Produces a resized version of this <code>CubeSurface</code> using …","Sets all texels in the surface to a solid color.","The default filter width for a given mipmap filter.","Flip along the X axis.","Flip along the Y axis.","Flip along the Z axis.","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>CubeSurface</code> from a 2D unfolded <code>Surface</code> in <code>img</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Raises channels to the power <code>gamma</code>. <code>gamma=2.2</code> approximates …","Raises RGB channels to the power <code>gamma</code>. <code>gamma=2.2</code> …","Inverts <code>Surface::to_log_scale()</code> by replacing all values <code>x</code> …","Converts from <code>Surface::to_luvw()</code>’s color space to RGB …","Produces HDR <code>(r, g, b, 1)</code> values from an LDR …","Produces HDR <code>(r, g, b, 1)</code> values from an LDR …","Applies the sRGB-to-linear transfer function to RGB …","Converts from <code>(Co, Cg, scale, Y)</code> colors to <code>(r, g, b, 1)</code> …","Returns a CUDA pointer to image data on GPU, with the same …","","","","","","","","","","","","","","","","Returns the height (Y size) of the surface in pixels.","Stores a histogram of channel values between <code>range_min</code> and …","Constructs a <code>Surface</code> from an uncompressed byte slice of …","Constructs a <code>Surface</code> from uncompressed byte slices of all …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if CUDA acceleration is enabled.","Returns the true if this surface represents a normal map. …","The default <code>Mipmap::Kaiser</code> filter parameters.","Returns the default <code>Resize::Kaiser</code> filter, with <code>width = 3.0</code>…","","","","","","","Returns the default <code>Mipmap::Box</code> filter, with <code>width = 0.5</code>.","Returns the default <code>Mipmap::Kaiser</code> filter, with <code>width = 3.0</code>…","Returns the default <code>Mipmap::Triangle</code> filter, with …","Returns the default <code>Resize::Mitchell</code> filter, with …","Constructs a new <code>CompressionOptions</code> struct. Sets …","Constructs a new compression context.","Constructs a new <code>OutputOptions</code> struct. Sets output options …","Returns true if data is currently held on the CPU. This is …","Returns true if data is currently held to the GPU. This is …","Write the <code>Container</code>’s header to a <code>Vec&lt;u8&gt;</code>. Returns …","Write the <code>Container</code>’s header to a <code>Vec&lt;u8&gt;</code>. Returns …","Write the <code>Container</code>’s header to a <code>Vec&lt;u8&gt;</code>. Returns …","Packs signed normals in <code>[-1, 1]</code> to an unsigned range <code>[0, 1]</code>…","Converts to premultiplied alpha, replacing <code>(r, g, b, a)</code> …","","Quantizes this channel to a particular number of <code>bits</code>, …","Returns the minimum and maximum values respectively in the …","Returns the minimum and maximum value in this channel, …","Reconstructs 3D normals from 2D transformed normals.","Sets compression options to the default values.","Resizes this surface to have size w x h x d using a given …","Resizes this surface so that its largest side has length …","Resizes this surface so that its largest side has length …","Attempts to scale the alpha channel so that a fraction …","Applies a <code>scale</code> and <code>bias</code> to the given channel. Each value <code>x</code>…","Set the <code>AlphaMode</code> of this surface. This is for output …","Draws borders of a given color around each w x h tile …","Sets all texels on the border of the surface to a solid …","Set the weights of each color channel used to measure …","Set container.","Enable/Disable CUDA acceleration; initializes CUDA if not …","Set desired compression format.","Set whether this surface represents a normal map. This is …","Set output header.","Set pitch alignment in bytes.","Describes an RGB/RGBA format using 32-bit masks per …","Set pixel type.","Set compression quality settings.","Set quantization options.","Set the sRGB flag, indicating whether this file stores …","Set user version.","Set the <code>WrapMode</code> of this surface. Note that <code>WrapMode</code> can …","Swizzles the channels of the surface.","Returns <code>TextureType::D2</code> if <code>depth == 1</code>, and <code>TextureType::D3</code> …","Returns the value of the channel for the texel at <code>(x, y, z)</code>…","Returns a mutable reference to the value of the channel …","Sets the <code>z</code> (blue) channel to <code>x^2 + y^2</code>.","Copies data from GPU to CPU, disabling CUDA operations. …","Raises channels to the power <code>1/gamma</code>. <code>gamma=2.2</code> …","Raises RGB channels to the power <code>1/gamma</code>. <code>gamma=2.2</code> …","Copies data from CPU to GPU, enabling CUDA for all …","Sets channels to the result of converting to grayscale, …","Stores luminance-only values in a two-channel way. Maybe …","Replaces all values with their log with the given base.","Converts from RGB colors to a (U, V, W, L) color space, …","Sets the RGB channels to a normal map generated by …","","","","","","","","","","","","","","","","","","","","","","","","Produces a shared-exponent Red, Green, Blue, Exponent …","Produces an LDR Red, Green, Blue, Magnitude encoding of …","Applies the linear-to-sRGB transfer function to RGB …","","Converts RGB channels from linear to a piecewise linear …","Converts from <code>(r, g, b, -)</code> colors to <code>(Co, Cg, 1, Y)</code> colors.","Applies an HDR-to-LDR tone mapper.","Applies a 4x4 affine transformation to the RGBA values.","Applies a 3D-&gt;2D normal transformation, setting the <code>z</code> …","Returns the default <code>Resize::Triangle</code> filter, with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>Surface</code> containing an unfolded/flattened …","Expands packed normals in <code>[0, 1]</code> to signed normals in …","Return NVTT version.","Returns the width (X size) of the surface in pixels.","Width in bytes per pixel per color channel of the …","Width in bytes per pixel per color channel of the …","Filter width.","Returns the <code>WrapMode</code> of this surface. Note that <code>WrapMode</code> …","","If true, input will be converted to signed values between …","The sharpness of the Kaiser window. Higher values make the …","The frequency of the sinc filter. Higher values include …","","Defaults to <code>1.0 / 3.0</code>.","Defaults to <code>2.0 / 3.0</code>.","","","","","","","","","","","","","","","","","","",""],"i":[2,27,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,2,27,18,18,18,18,18,18,18,18,18,18,18,18,18,19,20,19,20,0,14,12,0,0,23,30,0,0,0,22,0,0,0,22,22,15,15,18,18,18,18,18,0,17,0,21,0,2,27,25,17,30,0,4,14,12,25,0,23,12,27,29,29,29,16,6,28,17,0,27,26,0,26,0,29,29,29,6,17,0,26,2,27,19,20,25,23,0,18,18,19,20,19,20,0,30,21,0,26,16,0,0,0,0,28,28,28,0,6,14,12,4,21,21,30,16,0,27,1,1,13,1,1,7,1,1,1,1,32,31,7,33,1,2,15,16,17,6,18,19,20,21,22,23,13,14,12,25,26,27,28,29,30,36,11,4,32,31,7,33,1,2,15,16,17,6,18,19,20,21,22,23,13,14,12,25,26,27,28,29,30,36,11,4,1,13,1,1,1,1,1,1,1,1,7,1,1,2,15,16,17,6,18,19,20,21,22,23,13,14,12,25,26,27,28,29,30,11,4,1,2,15,16,17,6,18,19,20,21,22,23,13,14,12,25,26,27,28,29,30,11,4,31,31,31,1,1,1,1,7,7,1,1,1,32,1,19,1,32,31,33,1,1,36,19,20,30,32,31,7,33,1,7,2,15,16,17,6,21,22,23,14,12,25,26,27,28,29,30,11,31,31,31,7,7,1,14,1,1,1,2,15,16,17,6,18,19,20,21,22,23,13,14,12,25,26,27,28,29,30,11,4,4,7,32,31,7,33,1,2,15,16,17,6,6,18,19,20,21,22,22,23,23,13,14,12,25,26,27,28,29,30,36,11,4,7,1,1,1,1,1,1,1,1,2,15,16,17,6,21,22,23,25,26,27,28,29,30,11,1,1,1,1,32,31,7,33,1,2,15,16,17,6,18,19,20,21,22,23,13,14,12,25,26,27,28,29,30,36,11,4,31,1,14,13,11,11,11,11,11,11,13,13,13,13,32,31,33,1,1,31,31,31,1,1,4,1,7,1,1,32,1,1,1,1,1,1,1,1,32,33,31,32,1,33,32,32,32,32,32,33,33,1,1,1,1,1,1,1,7,1,1,1,1,1,1,1,1,2,15,16,17,6,18,19,20,21,22,23,13,14,12,25,26,27,28,29,30,11,4,1,1,1,4,1,1,1,1,1,13,32,31,7,33,1,2,15,16,17,6,18,19,20,21,22,23,13,14,12,25,26,27,28,29,30,36,11,4,32,31,7,33,1,2,15,16,17,6,18,19,20,21,22,23,13,14,12,25,26,27,28,29,30,36,11,4,32,31,7,33,1,2,15,16,17,6,18,19,20,21,22,23,13,14,12,25,26,27,28,29,30,36,11,4,7,1,0,1,19,20,13,1,48,48,49,49,50,51,51,50,52,53,54,55,52,53,54,55,52,53,54,55,52,53,54,55,56,56],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],[[1,1,2,2,3],[[5,[4]]]],0,[1,6],[[1,3,2],3],[[7,2],3],[[1,2,[8,[2]],[8,[3]]],3],[[1,2,3,9]],[[1,3]],[[1,[8,[10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,11],[[],[[13,[12]]]],[[1,[13,[14]],10],9],[1,9],[[1,10],9],[[1,10,10,10]],[[1,2]],[[1,2,3]],[[1,2]],[[1,2,3]],[[7,2,3,3]],[[1,2,3,3]],[1,1],[2,2],[15,15],[16,16],[17,17],[6,6],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[[[13,[24]]],[[13,[24]]]],[14,14],[12,12],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[11,11],[4,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[31,1,32,33],[[8,[[35,[34]]]]]],[[31,7,32,33],[[8,[[35,[34]]]]]],[[31,10,10,10,32,33],[[8,[[35,[34]]]]]],[[1,2]],[[1,2,10]],[[1,1,11,11]],[[1,1,2,2],[[5,[4]]]],[[7,10,3,16],7],[7,10],[1,10],[[1,10],10],[[1,11],1],[32,10],[1],[19],[1],[[],32],[[],31],[[],33],[[1,[8,[3]]]],[1,10],[36,9],[19,37],[20,37],[[30,10,10],9],[32],[31],[7],[33],[1],[7,10],[[2,2],9],[[15,15],9],[[16,16],9],[[17,17],9],[[6,6],9],[[21,21],9],[[22,22],9],[[23,23],9],[[14,14],9],[[12,12],9],[[25,25],9],[[26,26],9],[[27,27],9],[[28,28],9],[[29,29],9],[[30,30],9],[[11,11],9],[[31,1,10,32],10],[[31,7,10,32],10],[[31,10,10,10,10,32],10],[[7,29],1],[[7,10,16],7],[1],[14,3],[1],[1],[1],[[2,38],39],[[15,38],39],[[16,38],39],[[17,38],39],[[6,38],39],[[18,38],39],[[19,38],39],[[20,38],39],[[21,38],39],[[22,38],39],[[23,38],39],[[[13,[40]],38],39],[[14,38],39],[[12,38],39],[[25,38],39],[[26,38],39],[[27,38],39],[[28,38],39],[[29,38],39],[[30,38],39],[[11,38],39],[[4,38],39],[[4,38],39],[[1,30],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[41,6],[[]],[[]],[[]],[[]],[[]],[[]],[42,22],[43,23],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[7,3]],[[1,3]],[[1,2,3]],[[1,[8,[3]]]],[[1,10,10]],[[1,[8,[3]],[8,[3]]]],[1],[1],[1,3],[2],[15],[16],[17],[6],[21],[22],[23],[25],[26],[27],[28],[29],[30],[11],[1,10],[[1,2,3,3]],[[19,10,10,10],[[5,[1,4]]]],[[20,10,10,10],[[5,[1,4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[31,9],[1,9],[[],14],[[],[[13,[12]]]],0,0,0,0,0,0,[[],[[13,[14]]]],[[],[[13,[14]]]],[[],[[13,[14]]]],[[],[[13,[12]]]],[[],32],[[],31],[[],33],[1,9],[1,9],[[31,1,10,32,33],[[8,[[35,[34]]]]]],[[31,7,10,32,33],[[8,[[35,[34]]]]]],[[31,22,10,10,10,10,9,32,33],[[8,[[35,[34]]]]]],[1],[1],[44],[[1,2,10,9,9]],[[7,2]],[[1,2,[8,[2]],3]],[[1,26]],[32],[[1,10,10,10,[13,[12]]]],[[1,10,28,[13,[12]]]],[[1,10,28,[13,[12]]]],[[1,3,3,2]],[[1,2,3,3]],[[1,6]],[[1,10,10]],[1],[[32,3,3,3,[8,[3]]]],[[33,15]],[[31,9]],[[32,18]],[[1,9]],[[33,9]],[[32,45]],[[32,10,10,10,10,10]],[[32,21]],[[32,17]],[[32,9,9,9,[8,[45]]]],[[33,9]],[[33,45]],[[1,23]],[[1,27,27,27,27]],[1,22],[[1,2,10,10,10],3],[[1,2,10,10,10],3],[1],[1],[[7,3]],[[1,3]],[1],[1],[[1,[8,[3]],[8,[3]]]],[[1,2,3]],[[1,[8,[3]]]],[[1,3,3,3,3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,10,10]],[[1,[8,[3]],[8,[3]]]],[1],[[],46],[1],[1],[[1,25]],[1],[[1,26]],[[],[[13,[12]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[7,30],1],[1],[[],10],[1,10],[19,37],[20,37],0,[1,23],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"p":[[3,"Surface"],[4,"Channel"],[15,"f32"],[4,"SurfaceError"],[4,"Result"],[4,"AlphaMode"],[3,"CubeSurface"],[4,"Option"],[15,"bool"],[15,"u32"],[3,"BoundingBox"],[4,"Resize"],[3,"Filter"],[4,"Mipmap"],[4,"Container"],[4,"EdgeFixup"],[4,"Quality"],[4,"Format"],[4,"InputFormat"],[4,"SplitInputFormat"],[4,"PixelType"],[4,"TextureType"],[4,"WrapMode"],[8,"Clone"],[4,"ToneMapper"],[4,"NormalTransform"],[4,"Swizzle"],[4,"RoundMode"],[4,"CubeFace"],[4,"CubeLayout"],[3,"Context"],[3,"CompressionOptions"],[3,"OutputOptions"],[15,"u8"],[3,"Vec"],[3,"CUDA_SUPPORTED"],[15,"usize"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[4,"NvttAlphaMode"],[4,"NvttTextureType"],[4,"NvttWrapMode"],[3,"Demand"],[15,"i32"],[3,"String"],[3,"TypeId"],[13,"Bgra8Ub"],[13,"Kaiser"],[13,"Kaiser"],[13,"Mitchell"],[13,"Bgra8Ub"],[13,"Bgra8Sb"],[13,"Rgba16f"],[13,"Rgba32f"],[13,"InvalidDimensions"]]},\
"nvtt_sys":{"doc":"","tn":["EdgeFixup","NVTT_AlphaMode_None","NVTT_AlphaMode_Premultiplied","NVTT_AlphaMode_Transparency","NVTT_ChannelOrder_Alpha","NVTT_ChannelOrder_Blue","NVTT_ChannelOrder_Green","NVTT_ChannelOrder_MaxEnum","NVTT_ChannelOrder_One","NVTT_ChannelOrder_Red","NVTT_ChannelOrder_Zero","NVTT_Container_DDS","NVTT_Container_DDS10","NVTT_CubeLayout_Column","NVTT_CubeLayout_HorizontalCross","NVTT_CubeLayout_LatitudeLongitude","NVTT_CubeLayout_Row","NVTT_CubeLayout_VerticalCross","NVTT_EdgeFixup_Average","NVTT_EdgeFixup_None","NVTT_EdgeFixup_Stretch","NVTT_EdgeFixup_Warp","NVTT_Error_Count","NVTT_Error_CudaError","NVTT_Error_FileOpen","NVTT_Error_FileWrite","NVTT_Error_InvalidInput","NVTT_Error_Unknown","NVTT_Error_UnsupportedFeature","NVTT_Error_UnsupportedOutputFormat","NVTT_Error_UserInterruption","NVTT_False","NVTT_Format_ASTC_LDR_10x10","NVTT_Format_ASTC_LDR_10x5","NVTT_Format_ASTC_LDR_10x6","NVTT_Format_ASTC_LDR_10x8","NVTT_Format_ASTC_LDR_12x10","NVTT_Format_ASTC_LDR_12x12","NVTT_Format_ASTC_LDR_4x4","NVTT_Format_ASTC_LDR_5x4","NVTT_Format_ASTC_LDR_5x5","NVTT_Format_ASTC_LDR_6x5","NVTT_Format_ASTC_LDR_6x6","NVTT_Format_ASTC_LDR_8x5","NVTT_Format_ASTC_LDR_8x6","NVTT_Format_ASTC_LDR_8x8","NVTT_Format_ATI2","NVTT_Format_BC1","NVTT_Format_BC1a","NVTT_Format_BC2","NVTT_Format_BC3","NVTT_Format_BC3_RGBM","NVTT_Format_BC3n","NVTT_Format_BC4","NVTT_Format_BC4S","NVTT_Format_BC5","NVTT_Format_BC5S","NVTT_Format_BC6S","NVTT_Format_BC6U","NVTT_Format_BC7","NVTT_Format_CTX1","NVTT_Format_Count","NVTT_Format_DXT1","NVTT_Format_DXT1a","NVTT_Format_DXT1n","NVTT_Format_DXT3","NVTT_Format_DXT5","NVTT_Format_DXT5n","NVTT_Format_RGB","NVTT_Format_RGBA","NVTT_InputFormat_BGRA_8SB","NVTT_InputFormat_BGRA_8UB","NVTT_InputFormat_RGBA_16F","NVTT_InputFormat_RGBA_32F","NVTT_InputFormat_R_32F","NVTT_MipmapFilter_Box","NVTT_MipmapFilter_Kaiser","NVTT_MipmapFilter_Triangle","NVTT_NormalTransform_Orthographic","NVTT_NormalTransform_Paraboloid","NVTT_NormalTransform_Quartic","NVTT_NormalTransform_Stereographic","NVTT_PixelType_Float","NVTT_PixelType_SharedExp","NVTT_PixelType_SignedInt","NVTT_PixelType_SignedNorm","NVTT_PixelType_UnsignedFloat","NVTT_PixelType_UnsignedInt","NVTT_PixelType_UnsignedNorm","NVTT_Quality_Fastest","NVTT_Quality_Highest","NVTT_Quality_Normal","NVTT_Quality_Production","NVTT_ResizeFilter_Box","NVTT_ResizeFilter_Kaiser","NVTT_ResizeFilter_Mitchell","NVTT_ResizeFilter_Triangle","NVTT_RoundMode_None","NVTT_RoundMode_ToNearestPowerOfTwo","NVTT_RoundMode_ToNextPowerOfTwo","NVTT_RoundMode_ToPreviousPowerOfTwo","NVTT_TextureType_2D","NVTT_TextureType_3D","NVTT_TextureType_Cube","NVTT_ToneMapper_Halo","NVTT_ToneMapper_Lightmap","NVTT_ToneMapper_Linear","NVTT_ToneMapper_Reindhart","NVTT_ToneMapper_Reinhard","NVTT_True","NVTT_VERSION","NVTT_ValueType_FLOAT32","NVTT_ValueType_SINT8","NVTT_ValueType_UINT8","NVTT_WrapMode_Clamp","NVTT_WrapMode_Mirror","NVTT_WrapMode_Repeat","NvttAlphaMode","NvttBatchList","NvttBoolean","NvttCPUInputBuffer","NvttChannelOrder","NvttCompressionOptions","NvttContainer","NvttContext","NvttCubeLayout","NvttCubeSurface","NvttEdgeFixup","NvttError","NvttFormat","NvttGPUInputBuffer","NvttInputFormat","NvttMipmapFilter","NvttNormalTransform","NvttOutputOptions","NvttPixelType","NvttQuality","NvttRefImage","NvttResizeFilter","NvttRoundMode","NvttSurface","NvttSurfaceSet","NvttTextureType","NvttTimingContext","NvttToneMapper","NvttValueType","NvttWrapMode","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel_interleave","channel_swizzle","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","data","depth","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","height","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","num_channels","nvttAngularError","nvttBatchListAppend","nvttBatchListClear","nvttBatchListGetItem","nvttBatchListGetSize","nvttBeginImageHandler","nvttCPUInputBufferNumTiles","nvttCPUInputBufferTileSize","nvttCPUInputBufferType","nvttContextCompress","nvttContextCompressBatch","nvttContextCompressCube","nvttContextCompressData","nvttContextEnableTiming","nvttContextEstimateSize","nvttContextEstimateSizeCube","nvttContextEstimateSizeData","nvttContextGetTimingContext","nvttContextIsCudaAccelerationEnabled","nvttContextOutputHeader","nvttContextOutputHeaderCube","nvttContextOutputHeaderData","nvttContextQuantize","nvttCountMipmaps","nvttCreateBatchList","nvttCreateCPUInputBuffer","nvttCreateCompressionOptions","nvttCreateContext","nvttCreateCubeSurface","nvttCreateGPUInputBuffer","nvttCreateOutputOptions","nvttCreateSurface","nvttCreateSurfaceSet","nvttCreateTimingContext","nvttCubeSurfaceAverage","nvttCubeSurfaceClamp","nvttCubeSurfaceCosinePowerFilter","nvttCubeSurfaceCountMipmaps","nvttCubeSurfaceEdgeLength","nvttCubeSurfaceFace","nvttCubeSurfaceFastResample","nvttCubeSurfaceFold","nvttCubeSurfaceIrradianceFilter","nvttCubeSurfaceIsNull","nvttCubeSurfaceLoad","nvttCubeSurfaceRange","nvttCubeSurfaceSave","nvttCubeSurfaceToGamma","nvttCubeSurfaceToLinear","nvttCubeSurfaceUnfold","nvttDestroyBatchList","nvttDestroyCPUInputBuffer","nvttDestroyCompressionOptions","nvttDestroyContext","nvttDestroyCubeSurface","nvttDestroyGPUInputBuffer","nvttDestroyOutputOptions","nvttDestroySurface","nvttDestroySurfaceSet","nvttDestroyTimingContext","nvttDiff","nvttEncodeASTCCPU","nvttEncodeASTCGPU","nvttEncodeATI2CPU","nvttEncodeATI2GPU","nvttEncodeBC1ACPU","nvttEncodeBC1AGPU","nvttEncodeBC1CPU","nvttEncodeBC1GPU","nvttEncodeBC2CPU","nvttEncodeBC2GPU","nvttEncodeBC3CPU","nvttEncodeBC3GPU","nvttEncodeBC3NCPU","nvttEncodeBC3RGBMCPU","nvttEncodeBC4CPU","nvttEncodeBC4GPU","nvttEncodeBC4SCPU","nvttEncodeBC4SGPU","nvttEncodeBC5CPU","nvttEncodeBC5GPU","nvttEncodeBC5SCPU","nvttEncodeBC5SGPU","nvttEncodeBC6HCPU","nvttEncodeBC6HGPU","nvttEncodeBC7CPU","nvttEncodeBC7GPU","nvttEndImageHandler","nvttErrorHandler","nvttErrorString","nvttGPUInputBufferNumTiles","nvttGPUInputBufferTileSize","nvttGPUInputBufferType","nvttGetCompressionOptionsD3D9Format","nvttGetTargetExtent","nvttHistogram","nvttHistogramRange","nvttIsCudaSupported","nvttOutputHandler","nvttResetCompressionOptions","nvttResetOutputOptions","nvttResetSurfaceSet","nvttRmsAlphaError","nvttRmsCIELabError","nvttRmsError","nvttRmsToneMappedError","nvttSetCompressionOptionsColorWeights","nvttSetCompressionOptionsFormat","nvttSetCompressionOptionsPitchAlignment","nvttSetCompressionOptionsPixelFormat","nvttSetCompressionOptionsPixelType","nvttSetCompressionOptionsQuality","nvttSetCompressionOptionsQuantization","nvttSetContextCudaAcceleration","nvttSetOutputOptionsContainer","nvttSetOutputOptionsErrorHandler","nvttSetOutputOptionsFileHandle","nvttSetOutputOptionsFileName","nvttSetOutputOptionsOutputHandler","nvttSetOutputOptionsOutputHeader","nvttSetOutputOptionsSrgbFlag","nvttSetOutputOptionsUserVersion","nvttSetSurfaceAlphaMode","nvttSetSurfaceNormalMap","nvttSetSurfaceWrapMode","nvttSurfaceAbs","nvttSurfaceAddChannel","nvttSurfaceAlphaMode","nvttSurfaceAlphaTestCoverage","nvttSurfaceAverage","nvttSurfaceBinarize","nvttSurfaceBlend","nvttSurfaceBlockScaleCoCg","nvttSurfaceBuildNextMipmap","nvttSurfaceBuildNextMipmapDefaults","nvttSurfaceBuildNextMipmapSolidColor","nvttSurfaceCanMakeNextMipmap","nvttSurfaceCanvasSize","nvttSurfaceChannel","nvttSurfaceClamp","nvttSurfaceClone","nvttSurfaceConvolve","nvttSurfaceCopy","nvttSurfaceCopyChannel","nvttSurfaceCountMipmaps","nvttSurfaceCreateCleanMap","nvttSurfaceCreateSubImage","nvttSurfaceCreateToksvigMap","nvttSurfaceData","nvttSurfaceDemultiplyAlpha","nvttSurfaceDepth","nvttSurfaceExpandNormals","nvttSurfaceFill","nvttSurfaceFlipX","nvttSurfaceFlipY","nvttSurfaceFlipZ","nvttSurfaceFromLUVW","nvttSurfaceFromLogScale","nvttSurfaceFromRGBE","nvttSurfaceFromRGBM","nvttSurfaceFromYCoCg","nvttSurfaceGPUData","nvttSurfaceHeight","nvttSurfaceHistogram","nvttSurfaceIsNormalMap","nvttSurfaceIsNull","nvttSurfaceLoad","nvttSurfaceNormalizeNormalMap","nvttSurfacePackNormals","nvttSurfacePremultiplyAlpha","nvttSurfaceQuantize","nvttSurfaceRange","nvttSurfaceReconstructNormals","nvttSurfaceResize","nvttSurfaceResizeMakeSquare","nvttSurfaceResizeMax","nvttSurfaceResizeMaxParams","nvttSurfaceSave","nvttSurfaceScaleAlphaToCoverage","nvttSurfaceScaleBias","nvttSurfaceSetAtlasBorder","nvttSurfaceSetBorder","nvttSurfaceSetGetDepth","nvttSurfaceSetGetFaceCount","nvttSurfaceSetGetHeight","nvttSurfaceSetGetMipmapCount","nvttSurfaceSetGetSurface","nvttSurfaceSetGetTextureType","nvttSurfaceSetGetWidth","nvttSurfaceSetImage","nvttSurfaceSetImage2D","nvttSurfaceSetImage3D","nvttSurfaceSetImageData","nvttSurfaceSetImageRGBA","nvttSurfaceSetLoadDDS","nvttSurfaceSetSaveImage","nvttSurfaceSwizzle","nvttSurfaceToCPU","nvttSurfaceToCleanNormalMap","nvttSurfaceToGPU","nvttSurfaceToGamma","nvttSurfaceToGammaChannel","nvttSurfaceToGreyScale","nvttSurfaceToLM","nvttSurfaceToLUVW","nvttSurfaceToLinear","nvttSurfaceToLinearChannel","nvttSurfaceToLinearFromSrgb","nvttSurfaceToLogScale","nvttSurfaceToNormalMap","nvttSurfaceToRGBE","nvttSurfaceToRGBM","nvttSurfaceToSrgb","nvttSurfaceToXenonSrgb","nvttSurfaceToYCoCg","nvttSurfaceToneMap","nvttSurfaceTransform","nvttSurfaceTransformNormals","nvttSurfaceType","nvttSurfaceWidth","nvttSurfaceWrapMode","nvttTimingContextGetRecord","nvttTimingContextGetRecordCount","nvttTimingContextPrintRecords","nvttTimingContextSetDetailLevel","nvttUseCurrentDevice","nvttVersion","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","width"],"q":["nvtt_sys","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"deturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codei":[0,24,24,24,13,13,13,13,13,13,13,26,26,29,29,29,29,29,30,30,30,30,25,25,25,25,25,25,25,25,25,11,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,20,20,20,20,20,21,21,21,27,27,27,27,16,16,16,16,16,16,16,17,17,17,17,22,22,22,22,23,23,23,23,19,19,19,28,28,28,28,28,11,0,12,12,12,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,14,14,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,14,14,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,1,2,3,4,5,6,7,8,9,10,11,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,14,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,14],"fp":[[3,"NvttCPUInputBuffer"],[3,"NvttGPUInputBuffer"],[3,"NvttCompressionOptions"],[3,"NvttOutputOptions"],[3,"NvttContext"],[3,"NvttSurface"],[3,"NvttSurfaceSet"],[3,"NvttCubeSurface"],[3,"NvttBatchList"],[3,"NvttTimingContext"],[4,"NvttBoolean"],[4,"NvttValueType"],[4,"NvttChannelOrder"],[3,"NvttRefImage"],[4,"NvttFormat"],[4,"NvttPixelType"],[4,"NvttQuality"],[4,"NvttWrapMode"],[4,"NvttTextureType"],[4,"NvttInputFormat"],[4,"NvttMipmapFilter"],[4,"NvttResizeFilter"],[4,"NvttRoundMode"],[4,"NvttAlphaMode"],[4,"NvttError"],[4,"NvttContainer"],[4,"NvttNormalTransform"],[4,"NvttToneMapper"],[4,"NvttCubeLayout"],[4,"EdgeFixup"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
